CONNECT 4
by:
	Saharsh Bhansali
	Krissh Shankaran N

ACKNOWLEDGEMENT:
We are elated in presenting our Computer Science Project. 
We express our sincere gratitude to our Principal Shri P.G.Subramanian and the institution for providing us with the excellent laboratory facilities for the successful completion of this project. We are extremely grateful to our computer science teachers Mrs. Kurapati Indumathi and Mrs. Kalaivani G for their guidance and valuable suggestions. We also thank the lab assistant Mrs. Ananthi and the software engineer Mr. Dinesh for their timely help. We thank our fellow classmates for their support and the suggestions that they gave during the course of the project.

AIM:
To create a program that allows the user to play the game 'Connect4' against an Artificial Intelligence or against fellow humans. An account system is implemented to enable competitive play amongst humans.

INTRODUCTION:
This project deals with one of the most crucial forms of recreation – games. The game aims to improve the user’s logical thinking capacity and enable the user to take better decisions. It also tests the users' mettle against a machine and allows for competition among users through the Account and Leaderboard systems.

MODULES INCLUDED:

	Built-in Modules:
	random - random.randint() - To randomly assign starting move
	sys - sys.exit() - To close the program
	os - os.system('cls') - To clear the screen of the command window
	math - math.inf - To use the value 'infinity'
	time - time.sleep() - To add time delays in between screen changes
	sqlite3 - To use SQL from Python
	Functions and objects used from sqlite3:
		connect('connect4.db')
		mycon.cursor()
		cursor.execute()
		cursor.commit()
		cursor.rollback()

	User defined module:
	Connect4 - To run the Connect4 game
	User-Defined Functions in Connect4 module:
		new_board() - To create a new board instance
		display() - To display variable 'main_board' 
		win_condition() - To check if either player has won or if it is a draw
		move_maker() - To allow the player to make a move 
		check_legal() - To check if player's move is valid or not
		update() - To keep track of the moves in a game using variable 'move_list'
		undo() - To undo the last move made
		all_valid_loc() - To get all valid move locations
		eval_4() - To evaluate all subsections of a board instance
		score_board() - To evaluate and assign a score rating to a board instance
		best_move() - To analyse and select the best move that can be made
		minimax() - To allow the Artificial Intelligence to 'think' and make choices
		main() - To run the game
	Variables: Human, AI, ROW_Count, COL_Count, Plot_What, opponent_choice, turn, starter, move, move_list, main_board, winner, opponent_choice, diff

Functions Used:
CreateCursorAndConnection() - To create cursor and connection objects for MySQL connectivity
	Nested functions: check_db_exists() - To check if table and database exist
CloseCursorAndConnection() - To close the created cursor and connection objects for MySQL connectivity
SelectAllPlayerStats() - To display all players' data
SelectPlayerStats() - To display specific player's data
RegisterPlayer() - To add player to the database
PlayerLogin() - To log the player in for the game
UpdatePlayerStats() - To update the players' data after a match
Connect4_2PlayerGame() - To run the 2 player (human) Connect4 game
	Nested Functions: new_board(), display(), win_condition(), move_maker(), check_legal(), update(), undo(), all_valid_loc()

PROJECT CODE:

#This is the Code for the User-Defined Module

def new_board(board = {}):
    board = {i : [i if j==ROW_Count else '---' for j in range(ROW_Count+1)] for i in range(COL_Count)} 
    return board    

def display():
    global main_board
    for i in range(ROW_Count+1): 
        for j in range(COL_Count): 
            print('%7s'%main_board[j][-i-1], end = '\t')  
        print()
    print()

def win_condition():
    global main_board, Human, AI, ROW_Count, COL_Count, Plot_What    
    
    for i in range(ROW_Count-Plot_What+1):
        for j in range(COL_Count):
            col = main_board[j][i:i+Plot_What]
            if col.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
            elif col.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'
            
    for i in range(ROW_Count):
        for j in range(COL_Count-Plot_What+1):
            row = [main_board[k][i] for k in range(j, j+Plot_What)]
            if row.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
            elif row.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'            
    
    up_diag = []
    for i in range(ROW_Count-Plot_What+1):
        for j in range(COL_Count-Plot_What+1):
            up_diag = []
            for k in range(Plot_What):
                up_diag += [main_board[j+k][i+k]]            
                      
            if up_diag.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
            elif up_diag.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'
    
    down_diag = []
    for i in range(Plot_What-1, ROW_Count):
        for j in range(COL_Count-Plot_What+1):
            down_diag = []
            for k in range(Plot_What):
                down_diag += [main_board[j+k][i-k]]
            
            if down_diag.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
            elif down_diag.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'

    count = 0
    for i in main_board:
        count += main_board[i].count('---')
    if count==0:
        return 'It is a Draw!'

    return ''
                  
def move_maker(board, move, player):
    global ROW_Count
    for i in range(ROW_Count):
        if board[move][i]=='---':
            board[move][i] = player
            break

def check_legal():
    global COL_Count, turn, AI, AI, main_board
    
    move = ''
    while (len(move) == 0 or move == ''):
        move = input('Enter column of choice (integer from 0 to 6): ')
    
    
    if ord(move[0])<48 or ord(move[0])>57 or len(move) == 0:
        chk_move = check_legal()
        return chk_move
    
    else:
        int_move = int(move)
        while int_move<0 or int_move>COL_Count-1 or main_board[int_move].count('---') == 0:    
     
            if int_move in range(7): print('Selected column is full')
            else: print('Column out of range.')
            move = check_legal()
            try:
                int_move = int(move)
                return int_move
            except:
                print("Unexpected ERROR occured")
                chk_move = check_legal()
                return chk_move
        
        return int_move
        
def update(move_list, move):
    move_list += [move]
    
def undo(player, opp):
    global main_board, move_list, turn
    
    a = len(move_list)
    if a <= 0:
        print('Cannot undo, board is empty.')
    
    else:
        del move_list[a-1:]
        a -= 1
        main_board = new_board()

        for i in range(len(move_list)):
            m = move_list[i]
            if i%2==0:
                if starter == 1:
                    move_maker(main_board, m, 'X')
                else:
                    move_maker(main_board, m, 'O')
            else:
                if (starter+1)%2 == 1:
                    move_maker(main_board, m, 'X')
                else:
                    move_maker(main_board, m, 'O')
        turn = (turn+1)%2

def all_valid_loc(board):
    global COL_Count, ROW_Count
    
    valid_loc = []
    for col in range(COL_Count):
        if board[col].count('---') != 0:
            valid_loc += [col]

    return valid_loc

def eval_4(block, player, opp, score):
    global Plot_What

    if block.count(player) == Plot_What:
        score += 100
    elif block.count(player) == Plot_What-1 and block.count('---') == 1:
        score += 8
    elif block.count(player) == Plot_What-2 and block.count('---') == 2:
        score += 2
    elif block.count(opp) == Plot_What-1 and block.count('---') == 1:
        score -= 8.5
    elif block.count(opp) == Plot_What-1 and block.count('---') == 2:
        score-= 2.2
    elif block.count(opp) == Plot_What:
        score -= 100.2

    return score

def score_board(board, player):
    global Human, Human, AI, AI, ROW_Count, COL_Count, Plot_What 

    if player == AI:
        opp = Human
    elif player == Human:
        opp = AI

    score = 0    
    centre_col = [board[COL_Count//2][i:i+Plot_What] for i in range(ROW_Count)]
    centre_count = centre_col.count(player)
    score += (centre_count*5)
    opp_cen_count = centre_col.count(opp)
    score -= (opp_cen_count*3)    
    
    for i in range(ROW_Count):
        for j in range(COL_Count-Plot_What+1):
            row = [board[k][i] for k in range(j, j+Plot_What)]
            score = eval_4(row, player, opp, score)    
    
    for i in range(ROW_Count-Plot_What+1):        
        for j in range(COL_Count):
            col = board[j][i:i+Plot_What]
            score = eval_4(col, player, opp, score)
   
    up_diag = []
    for i in range(ROW_Count-Plot_What+1):
        for j in range(COL_Count-Plot_What+1):
            up_diag = []
            for k in range(Plot_What):
                up_diag += [board[j+k][i+k]]                      
            score = eval_4(up_diag, player, opp, score)
    
    
    down_diag = []
    for i in range(Plot_What-1, ROW_Count):
        for j in range(COL_Count-Plot_What+1):
            down_diag = []
            for k in range(Plot_What):
                down_diag += [board[j+k][i-k]]            
            score = eval_4(down_diag, player, opp, score)

    return score

def best_move(board, player):

    best_score = 0
    valid_loc = all_valid_loc(board)
    best_move = random.choice(valid_loc)
    temp_board = {}
    
    for col in valid_loc:
        temp_board = new_board(temp_board)
        for i in range(COL_Count):
            for j in range(ROW_Count):
                temp_board[i][j] = main_board[i][j]

        move_maker(temp_board, col, player)
        score = score_board(temp_board, player)
        
        if best_score < score:
            best_move = col
            best_score = score
        
    return best_move

def minimax(board, alpha, beta, depth, maximizingPlayer):
    global AI, Human, Human, AI
    
    winner = win_condition()

    
    copy_board = {}
    valid_loc = all_valid_loc(board)
    colmn = random.choice(valid_loc)

    if depth == 0 or bool(winner):
        if winner == AI:
            return ( None, 1000000000)
        elif winner == Human:
            return (None, -1000000000)
        elif str(winner) == 'True': 
            return (None, 0)
        elif depth == 0:
            return (colmn, score_board(board, AI))

    if maximizingPlayer:
        val = -math.inf
        
        for col in valid_loc:         
            
            copy_board = new_board(copy_board)        
            for i in range(COL_Count):
                for j in range(ROW_Count):
                    copy_board[i][j] = board[i][j]

            move_maker(copy_board, col, AI)            
            
            
            new_score = minimax(copy_board, alpha, beta, depth-1, False)[1]
            if new_score > val:
                val = new_score
                colmn = col
                
            alpha = max(alpha, val) 
            if alpha >= beta:
                break

        return (colmn, val)
    
    else: 
        val = math.inf
        
        for col in valid_loc:            
            copy_board = new_board(copy_board)
            
            for i in range(COL_Count):
                for j in range(ROW_Count):
                    copy_board[i][j] = board[i][j]
           
            move_maker(copy_board, col, Human)            
            
            new_score = minimax(copy_board, alpha, beta, depth-1, True)[1]
            if new_score < val:
                val = new_score
                colmn = col
                
            beta = min(beta, val) 
            if beta <= alpha:
                break

        return (colmn, val)

#------ MAIN PROGRAM of the Connect4 Module---------

import random, os, math, time 

turn = random.randint(0,1)
starter = turn
move = 0
move_list = []


ROW_Count = 6
COL_Count = 7 
Plot_What = 4 
AI = 'O'
Human = 'X'

main_board = new_board()
winner = win_condition()
opponent_choice = ''
diff = {'2':3, '3':5, '4':7}

def main():
    global opponent_choice, winner, main_board, AI, Human, ROW_Count, COL_Count, Plot_What, turn, starter, move, move_list, diff
    while opponent_choice not in ('1', '2', '3', '4'):
        opponent_choice = input("Choose opponent: \n1. Human \n2. AI (Easy) \n3. AI (Medium) \n4. AI (Hard)\n>>> ")

        if opponent_choice in diff:
            d1 = diff[opponent_choice]
            
        time.sleep(0.5)
        os.system('cls')

    while not winner:
        menu = ' ' 
       
        if opponent_choice in diff and turn == 0: pass
        else:
            menu = input('Enter:\n"QUIT" to exit.\n"UNDO" to undo last move\nClick the "Enter" key to continue with the game: ')
            os.system('cls')
        
        if menu.upper() == 'QUIT':
            time.sleep(5)
            print("GAME OVER")
            break

        elif menu.upper() == 'UNDO' and opponent_choice in diff and  starter == 0 and len(move_list) < 2:
            print('Cannot undo, AI going first.')

        elif menu.upper() == 'UNDO' and opponent_choice in diff: 
            undo(Human, AI)
            undo(AI, Human)
            display()
            time.sleep(1)

        elif menu.upper() == 'UNDO' and opponent_choice == '1': 
            undo(Human, AI)
            display()
            time.sleep(1)

        else:
            try:
                if turn == 1:
                    print(f'Player 1\'s ({Human}\'s) turn.')
                    print()
                    display()
                    move = check_legal()
                    move_maker(main_board, move, Human)
                    update(move_list, move)
                    time.sleep(1.2)
                    os.system('cls')
                    
                elif turn == 0 and not win_condition():
                    
                    if opponent_choice == '1':
                        print(f'Player 2\'s ({AI}\'s) turn.')
                        print()                    
                        display()
                        move = check_legal()
                        move_maker(main_board, move, AI)
                        update(move_list, move)
                        time.sleep(1.2)
                        os.system('cls')
                    
                    elif opponent_choice in diff: 
                        print(f'AI\'s ({AI}\'s) turn.')                    
                        move, algo_score = minimax(board = main_board, alpha = -math.inf, beta = math.inf, depth = d1, maximizingPlayer = True)
                        print('Move played:', move, '\n')
                        time.sleep(1.5)
                        os.system('cls')
                        move_maker(main_board, move, AI)
                        update(move_list, move)

                        
            except: pass    
                    
            turn+=1
            turn%=2
            
            display()
            time.sleep(2)  

        if win_condition():
            print(win_condition())
            time.sleep(5)
            print("GAME OVER")
            time.sleep(1)
            break
        
#main()

#==============================================================================================================================================================================================================================================================================

#This is the Main Project Code

def CreateCursorAndConnection():  
    def check_db_exists():
        
        if mycon is None:
            print("Error in connection, please retry.")
            return False
        
        else:
            try:
                table_create = 'create table UserData(pName varchar(30) primary key, pPass varchar(30) not null, pTotal int default 0, pWins int default 0, pLosses int default 0, pDraws int default 0);'
                cursor.execute(table_create)
                cursor.commit()
                print('Table "UserData" successfully created!')
            
            except:
                print('Error while creating table. Table may already exist.')
                os.system('cls')

    try:
        mycon = SQL.connect('connect4.db') 
        cursor = mycon.cursor()
        check_db_exists()
        return cursor, mycon
       
    except SQL.Error as e:
        print(e)
        print('Unexpected ERROR ecountered! \nPlease check system software for compatability.')
        time.sleep(10)
        return None, None

def CloseCursorAndConnection(cursor_obj, connection_obj):
    try:
        cursor_obj.close()
        connection_obj.close()
    except: pass

def SelectAllPlayerStats():
    cursor_obj, connection_obj = CreateCursorAndConnection()
    
    select_all_stats = "select pName as 'Player', pTotal as 'Games Played', pWins as 'Wins', pLosses as 'Losses', pDraws as 'Draws' from UserData order by pWins;"
    cursor_obj.execute(select_all_stats) 
   
    
    for head in col_heads:
        if head == 'Total Games': print("| %12s"%head, "%2s"%end, end = '')
        else: print("| %8s"%head, "%6s"%end, end = '')
    print()

    for i in cursor_obj.fetchall():
        for col in i:
            print("| %7s"%col,"%7s"%end, end = '')
       
        print()
    
    CloseCursorAndConnection(cursor_obj, connection_obj)

def SelectPlayerStats():
    cursor_obj, connection_obj = CreateCursorAndConnection()

    player = input("Enter Player Name: ")
    select_single_stats = f"select pName as 'Player', pTotal as 'Games Played', pWins as 'Wins', pLosses as 'Losses', pDraws as 'Draws' from UserData where pName = '{player}' order by pWins ;"
    cursor_obj.execute(select_single_stats) 
    
    for head in col_heads:
        if head == 'Total Games': print("| %12s"%head, "%2s"%end, end = '')
        else: print("| %8s"%head, "%6s"%end, end = '')
    print()
    
    i = cursor_obj.fetchone()
    for col in i:
        print("| %7s"%col,"%7s"%end, end = '')
    print()
    time.sleep(3)

    CloseCursorAndConnection(cursor_obj, connection_obj)

def RegisterPlayer():
    cursor_obj, connection_obj = CreateCursorAndConnection()

    while True:
        player = input("Enter Player Name: ")
        if bool(player) == False:
            print('Invalid Input. Please retry.')
            time.sleep(0.8)
            os.system('cls')
        else: break
    
    password = input("Enter Player Password: ")
    c_pass = input("Confirm Player Password: ")
    
    insert = f"insert into userdata(pName, pPass) values('{player}', '{password}');"
    
    if c_pass == password:
        try: 
            cursor_obj.execute(insert)
            connection_obj.commit()
            print('\nRegistration successful.')
        except: 
            connection_obj.rollback()
            print('\nError while registering. \nPlayer Name may already be registered. \nPlease retry with different Player Name.')

    CloseCursorAndConnection(cursor_obj, connection_obj)

def PlayerLogin():
    global player1, player2

    cursor_obj, connection_obj = CreateCursorAndConnection()

    while True:
        player = input("Enter Player Name: ")
        if bool(player) == False:
            print('Invalid Input. Please retry.')
            time.sleep(0.8)
            os.system('cls')
        elif player == player1 or player == player2:
            print('Player is already logged in. Please Retry.')
            time.sleep(0.8)
            os.system('cls')
        else: break

    select_pPass = f"select pPass as 'Password' from UserData where pName = '{player}';"
    cursor_obj.execute(select_pPass)
    a = cursor_obj.fetchone()
    if a and bool(a) == True: 
        password = input("Enter Player Password: ")
        
        if a[0] == password: 
            print('Login successful.')
            return player
        else: 
            print('Unsucessful login. Please retry.')
            return False            
    
    else: print('Player Name does not exist. Please Sign-In first.')
    
    CloseCursorAndConnection(cursor_obj, connection_obj)

def UpdatePlayerStats(win_player, loss_player, draw = False):
    cursor_obj, connection_obj = CreateCursorAndConnection()

    try:        
        if draw == True and win_player != loss_player:
            cursor_obj.execute(f"update userdata set pTotal = pTotal + 1, pDraws = pDraws + 1 where pName in ('{win_player}','{loss_player}');")
            print('Successfully updated data.')
        elif draw == False and win_player != loss_player:
            cursor_obj.execute(f"update userdata set pTotal = pTotal + 1, pWins = pWins + 1 where pName = '{win_player}';")
            cursor_obj.execute(f"update userdata set pTotal = pTotal + 1, pLosses = pLosses + 1 where pName = '{loss_player}';")
            print('Successfully updated data.')
        else: print('Error while updating data. Contact Admin for help.')

        connection_obj.commit()

    except: print('Error while updating data. Contact Admin for help.'); connection_obj.rollback()

    CloseCursorAndConnection(cursor_obj, connection_obj)

def Connect4_2PlayerGame():
    def new_board(board = {}):
        board = {i : [i if j==ROW_Count else '---' for j in range(ROW_Count+1)] for i in range(COL_Count)} 
        return board

    def display():
        global main_board
        for i in range(ROW_Count+1): 
            for j in range(COL_Count): 
                print('%7s'%main_board[j][-i-1], end = '\t')  
            print()
        print()

    def win_condition():
        global main_board, Human, AI, ROW_Count, COL_Count, Plot_What
        for i in range(ROW_Count-Plot_What+1):
            for j in range(COL_Count):
                col = main_board[j][i:i+Plot_What]
                if col.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
                elif col.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'             

        
        for i in range(ROW_Count):
            for j in range(COL_Count-Plot_What+1):
                row = [main_board[k][i] for k in range(j, j+Plot_What)]
                if row.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
                elif row.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'
                
      
        up_diag = []
        for i in range(ROW_Count-Plot_What+1):
            for j in range(COL_Count-Plot_What+1):
                up_diag = []
                for k in range(Plot_What):
                    up_diag += [main_board[j+k][i+k]]
                
                            
                if up_diag.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
                elif up_diag.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'

     
        down_diag = []
        for i in range(Plot_What-1, ROW_Count):
            for j in range(COL_Count-Plot_What+1):
                down_diag = []
                for k in range(Plot_What):
                    down_diag += [main_board[j+k][i-k]]

                
                if down_diag.count(Human) == Plot_What: return f'Player 1 ({Human}) Wins!'
                elif down_diag.count(AI) == Plot_What: return f'Player 2 ({AI}) Wins!'

        count = 0
        for i in main_board:
            count += main_board[i].count('---')
        if count==0:
            return 'It is a Draw!'

        return ''
                    
    def move_maker(board, move, player):
        global ROW_Count
        for i in range(ROW_Count):
            if board[move][i]=='---':
                board[move][i] = player
                break

    def check_legal():
        global COL_Count, turn, AI, AI, main_board
        
        move = ''
        while (len(move) == 0 or move == ''):
            move = input('Enter column of choice (integer from 0 to 6): ')
        
        
        if ord(move[0])<48 or ord(move[0])>57 or len(move) == 0:
            chk_move = check_legal()
            return chk_move
        else:
            int_move = int(move)
            while int_move<0 or int_move>COL_Count-1 or main_board[int_move].count('---') == 0:       
                
                if int_move in range(7): print('Selected column is full')
                else: print('Column out of range.')
                move = check_legal()
                try:
                    int_move = int(move)
                    return int_move
                except:
                    print("Unexpected ERROR occured")
                    chk_move = check_legal()
                    return chk_move                
            
            return int_move
            
    def update(move_list, move):
        move_list += [move]        

    def undo(player, opp):
        global main_board, Human, AI, move_list, turn        
        
        a = len(move_list)
        if a <= 0:
            print('Cannot undo, board is empty.')
        else:
            del move_list[a-1:]
            a -= 1
            main_board = new_board()

            for i in range(a):
                m = move_list[i]
                if i%2==0:
                    if starter == 1:
                        move_maker(main_board, m, 'X')
                    else:
                        move_maker(main_board, m, 'O')
                else:
                    if (starter+1)%2 == 1:
                        move_maker(main_board, m, 'X')
                    else:
                        move_maker(main_board, m, 'O')
            turn = (turn+1)%2

    def all_valid_loc(board):
        global COL_Count, ROW_Count
        
        valid_loc = []
        for col in range(COL_Count):
            if board[col].count('---') != 0:
                valid_loc += [col]

        return valid_loc
    
    global main_board, turn, starter, move, move_list, ROW_Count, COL_Count, Plot_What, AI, Human
    
    turn = random.randint(0,1)
    starter = turn
    move = 0  
    move_list = []    
    main_board = new_board()
    winner = win_condition()    

    while not winner:
        menu = ' '        
        menu = input('Enter:\n"QUIT" to exit.\n"UNDO" to undo last move\nClick the "Enter" key to continue with the game: ')
        os.system('cls')
        
        if menu.upper() == 'QUIT':
            time.sleep(5)
            print("GAME OVER")
            time.sleep(1)
            return 'Game ended with QUIT'

        elif menu.upper() == 'UNDO': 
            undo(Human, AI)
            display()
            time.sleep(1)
            
        else:
            try:
                if turn == 1:
                    print(f'Player 1\'s ({Human}\'s) turn.')
                    print()
                    display()
                    move = check_legal()
                    move_maker(main_board, move, Human)
                    update(move_list, move)
                    time.sleep(1.2)
                    os.system('cls')
                    
                elif turn == 0 and not win_condition():                  
                    
                    print(f'Player 2\'s ({AI}\'s) turn.')
                    print()                    
                    display()
                    move = check_legal()
                    move_maker(main_board, move, AI)
                    update(move_list, move)
                    time.sleep(1.2)
                    os.system('cls')
              
            except: pass    
                    
            turn+=1
            turn%=2
            
            display()
            time.sleep(2)  

        if win_condition():
            print(win_condition())
            time.sleep(1)
            print("GAME OVER")
            return win_condition()
            time.sleep(1)
            break 

import random, math
turn = random.randint(0,1)
starter = turn
move = 0
move_list = []
ROW_Count = 6 
COL_Count = 7 
Plot_What = 4 
AI = 'O'
Human = 'X'
main_board = {}

import sqlite3 as SQL, time, sys, os

end = '|'
cont = 'Y'
col_heads = ('Player', 'Total Games', 'Wins', 'Losses', 'Draws')
main_over = False
sub_over = False
sub_menu = 0
main_menu = 0
player1, player2 = '', ''

main_cursor, main_connection = CreateCursorAndConnection()
if (main_cursor, main_connection) == (None, None): cont = 'no'
else: CloseCursorAndConnection(main_cursor, main_connection)

while cont.upper() == 'Y':
    main_menu = input('MAIN MENU: \n1. Single Player \n2. Two Players \n3. Leaderboard \n4. Quit \n>>> ')
   
    if main_menu in ('1', '2', '3', '4'):
        time.sleep(1)
        os.system('cls')

        if main_menu == '1':      
            import Connect4 as C4
            C4.main()
            C4.opponent_choice = ''
            C4.turn = random.randint(0,1)
            C4.starter = turn
            C4.move = 0
            C4.move_list = []
            C4.main_board = C4.new_board({}) 

        elif main_menu == '2': 
            player1, player2 = '', ''

            while sub_menu not in ('1', '2', '3', '4', '5') or sub_over == False:
                time.sleep(0.5)
                os.system('cls')
                sub_menu = input('2 PLAYER MODE: \n1. Sign-up \n2. Log-in  \n3. Play \n4. Log-out \n5. Show Player Stats \n6. Exit to MAIN MENU \n>>> ')
                time.sleep(1.5)
                os.system('cls')

                if sub_menu == '1': 
                    RegisterPlayer()
                    time.sleep(1)
                    continue

                elif sub_menu == '2':
                    if bool(player1) == False:
                        player1 = PlayerLogin()

                    elif bool(player1) == True and bool(player2) == False:
                        player2 = PlayerLogin()
                        
                    else:
                        print('Two players already logged-in. Log-out of one account to log-in.')
                    
                    time.sleep(1)
                    continue
                
                elif sub_menu == '4': 
                    log_out_player = input('Enter Player Name: ')
                    
                    if log_out_player == player1:
                        player1 = ''
                        print(f'{log_out_player} successfully Logged-Out')
                    elif log_out_player == player2: 
                        player2 = ''
                        print(f'{log_out_player} successfully Logged-Out')
                    else:
                        print('Incorrect Player Name entered, please retry.')
                    
                    time.sleep(1.5)
                    continue
                
                elif (player1 == '' or player2 == '') and sub_menu == '3':
                    print('This option needs 2 players to be logged in. \n\nPlease Log-In and RETRY.')
                    time.sleep(0.5)

                elif sub_menu == '3' and (bool(player1) == bool(player2) == True) and player1 != player2: 
                    result = Connect4_2PlayerGame()

                    if result == 'Player 1 (X) Wins!':
                        UpdatePlayerStats(win_player = player1, loss_player = player2, draw = False)
                    
                    elif result == 'Player 2 (O) Wins!':
                        UpdatePlayerStats(win_player = player2, loss_player = player1, draw = False)
                    
                    elif result == 'It is a Draw!':
                        UpdatePlayerStats(win_player = player1, loss_player = player2, draw = True)
                    
                    elif result == 'Game ended with QUIT':
                        print('Someone QUIT the game!')                        
                    
                    else:
                        print('ERROR! The game ended unexpectedly.')

                    time.sleep(2)
                    result = ''

                elif sub_menu == '5':
                    SelectPlayerStats()
                    continue
                
                elif sub_menu == '6':
                    sub_over = True
                    break

                else:
                    print('Invalid input. Please RETRY.')

        elif main_menu == '3':
            SelectAllPlayerStats()
            
        elif main_menu == '4':
            time.sleep(2)
            sys.exit("GAME OVER")
            time.sleep(2)

    if main_menu in ('1', '2', '3', '4'):
        cont = input('\nPress "Y" to continue. Press any other key to exit. ')
    else: 
        cont = input('\nERROR in input. \nPress "Y" to retry. \nPress any other key to exit. \n> ')
    
    time.sleep(0.5)
    os.system('cls')

#==============================================================================================================================================================================================================================================================================

SUGGESTED IMPROVEMENTS:

1. Creating a better user interface with more options, such as delete account.
2. Creating Administrator accounts with administrator privileges that can be used to edit the data in the database.
3. Adding a provision to hide user password during password entry for security purposes.
4. Increasing the efficiency of the Artificial Intelligence and increasing the level of difficulty.
5. Changing the leaderboard evaluation metric to accurately reflect win rates and losses, rather than using just Player versus Player data. This is also to prevent one person from creating two accounts to commit fraud.
6. Adding a password change and a passwors recovery option for the users.

BIBLIOGRAPHY
1.  COMPUTER SCIENCE with python class XI, by SUMITA ARORA                                                                                                                                    
2. COMPUTER SCIENCE with python class XII, by SUMITA ARORA   
3. How to Program a Connect 4 AI (implementing the minimax algorithm), by KEITH GALLI
